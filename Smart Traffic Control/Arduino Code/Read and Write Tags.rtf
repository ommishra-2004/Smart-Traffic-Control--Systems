{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
//TO WRITE TEXT\
\
#include <SPI.h>//include the SPI bus library\
#include <MFRC522.h>//include the RFID reader library\
\
#define SS_PIN 10  //slave select pin\
#define RST_PIN 5  //reset pin\
MFRC522 mfrc522(SS_PIN, RST_PIN);        // instatiate a MFRC522 reader object.\
MFRC522::MIFARE_Key key;//create a MIFARE_Key struct named 'key', which will hold the card information\
\
\
void setup() \{\
        Serial.begin(9600);        // Initialize serial communications with the PC\
        SPI.begin();               // Init SPI bus\
        mfrc522.PCD_Init();        // Init MFRC522 card (in case you wonder what PCD means: proximity coupling device)\
        Serial.println("Scan a MIFARE Classic card");\
        \
        // Prepare the security key for the read and write functions - all six key bytes are set to 0xFF at chip delivery from the factory.\
        // Since the cards in the kit are new and the keys were never defined, they are 0xFF\
        // if we had a card that was programmed by someone else, we would need to know the key to be able to access it. This key would then need to be stored in 'key' instead.\
 \
        for (byte i = 0; i < 6; i++) \{\
                key.keyByte[i] = 0xFF;//keyByte is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library\
        \}\
\
\}\
\
int block=2;//this is the block number we will write into and then read. Do not write into 'sector trailer' block, since this can make the block unusable.\
                          \
byte blockcontent[16] = \{"SubScribe______"\};//an array with 16 bytes to be written into one of the 64 card blocks is defined!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\
//byte blockcontent[16] = \{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\};//all zeros. This can be used to delete a block.\
byte readbackblock[18];//This array is used for reading out a block. The MIFARE_Read method requires a buffer that is at least 18 bytes to hold the 16 bytes of a block.\
\
void loop()\
\{\
\
        /*****************************************establishing contact with a tag/card**********************************************************************/\
        \
  	// Look for new cards (in case you wonder what PICC means: proximity integrated circuit card)\
	if ( ! mfrc522.PICC_IsNewCardPresent()) \{//if PICC_IsNewCardPresent returns 1, a new card has been found and we continue\
		return;//if it did not find a new card is returns a '0' and we return to the start of the loop\
	\}\
\
	// Select one of the cards\
	if ( ! mfrc522.PICC_ReadCardSerial()) \{//if PICC_ReadCardSerial returns 1, the "uid" struct (see MFRC522.h lines 238-45)) contains the ID of the read card.\
		return;//if it returns a '0' something went wrong and we return to the start of the loop\
	\}\
\
        // Among other things, the PICC_ReadCardSerial() method reads the UID and the SAK (Select acknowledge) into the mfrc522.uid struct, which is also instantiated\
        // during this process.\
        // The UID is needed during the authentication process\
        	//The Uid struct:\
	        //typedef struct \{\
		//byte		size;			// Number of bytes in the UID. 4, 7 or 10.\
		//byte		uidByte[10];            //the user ID in 10 bytes.\
		//byte		sak;			// The SAK (Select acknowledge) byte returned from the PICC after successful selection.\
	        //\} Uid;\
         \
         Serial.println("card selected");\
         \
         /*****************************************writing and reading a block on the card**********************************************************************/\
         \
         writeBlock(block, blockcontent);//the blockcontent array is written into the card block\
         //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));\
         \
         //The 'PICC_DumpToSerial' method 'dumps' the entire MIFARE data block into the serial monitor. Very useful while programming a sketch with the RFID reader...\
         //Notes:\
         //(1) MIFARE cards conceal key A in all trailer blocks, and shows 0x00 instead of 0xFF. This is a secutiry feature. Key B appears to be public by default.\
         //(2) The card needs to be on the reader for the entire duration of the dump. If it is removed prematurely, the dump interrupts and an error message will appear.\
         //(3) The dump takes longer than the time alloted for interaction per pairing between reader and card, i.e. the readBlock function below will produce a timeout if\
         //    the dump is used.\
         \
	 //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));//uncomment this if you want to see the entire 1k memory with the block written into it.\
         \
         readBlock(block, readbackblock);//read the block back\
         Serial.print("read block: ");\
         for (int j=0 ; j<16 ; j++)//print the block contents\
         \{\
           Serial.write (readbackblock[j]);//Serial.write() transmits the ASCII numbers as human readable characters to serial monitor\
         \}\
         Serial.println("");\
         \
 \
\}\
\
int writeBlock(int blockNumber, byte arrayAddress[]) \
\{\
  //this makes sure that we only write into data blocks. Every 4th block is a trailer block for the access/security info.\
  int largestModulo4Number=blockNumber/4*4;\
  int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector\
  if (blockNumber > 2 && (blockNumber+1)%4 == 0)\{Serial.print(blockNumber);Serial.println(" is a trailer block:");return 2;\}//block number is a trailer block (modulo 4); quit and send error code 2\
  Serial.print(blockNumber);\
  Serial.println(" is a data block:");\
  \
  /*****************************************authentication of the desired block for access***********************************************************/\
  byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));\
  //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);\
  //this method is used to authenticate a certain block for writing or reading\
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A\
  //blockAddr is the number of the block from 0 to 15.\
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF\
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.\
  if (status != MFRC522::STATUS_OK) \{\
         Serial.print("PCD_Authenticate() failed: ");\
         Serial.println(mfrc522.GetStatusCodeName(status));\
         return 3;//return "3" as error message\
  \}\
  //it appears the authentication needs to be made before every block read/write within a specific sector.\
  //If a different sector is being authenticated access to the previous one is lost.\
\
\
  /*****************************************writing the block***********************************************************/\
        \
  status = mfrc522.MIFARE_Write(blockNumber, arrayAddress, 16);//valueBlockA is the block number, MIFARE_Write(block number (0-15), byte array containing 16 values, number of bytes in block (=16))\
  //status = mfrc522.MIFARE_Write(9, value1Block, 16);\
  if (status != MFRC522::STATUS_OK) \{\
           Serial.print("MIFARE_Write() failed: ");\
           Serial.println(mfrc522.GetStatusCodeName(status));\
           return 4;//return "4" as error message\
  \}\
  Serial.println("block was written");\
\}\
\
\
int readBlock(int blockNumber, byte arrayAddress[]) \
\{\
  int largestModulo4Number=blockNumber/4*4;\
  int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector\
\
  /*****************************************authentication of the desired block for access***********************************************************/\
  byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));\
  //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);\
  //this method is used to authenticate a certain block for writing or reading\
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A\
  //blockAddr is the number of the block from 0 to 15.\
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF\
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.\
  if (status != MFRC522::STATUS_OK) \{\
         Serial.print("PCD_Authenticate() failed (read): ");\
         Serial.println(mfrc522.GetStatusCodeName(status));\
         return 3;//return "3" as error message\
  \}\
  //it appears the authentication needs to be made before every block read/write within a specific sector.\
  //If a different sector is being authenticated access to the previous one is lost.\
\
\
  /*****************************************reading a block***********************************************************/\
        \
  byte buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size... \
  status = mfrc522.MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number\
  if (status != MFRC522::STATUS_OK) \{\
          Serial.print("MIFARE_read() failed: ");\
          Serial.println(mfrc522.GetStatusCodeName(status));\
          return 4;//return "4" as error message\
  \}\
  Serial.println("block was read");\
\}\
\
\
\
\
\
// TO PRINT AMOUNT\
\
\
TO PRINT AMOUNT :-\
\
#include <SPI.h>\
#include <MFRC522.h>\
\
#define SS_PIN 10\
#define RST_PIN 5\
MFRC522 mfrc522(SS_PIN, RST_PIN); \
MFRC522::MIFARE_Key key;\
\
void setup() \{\
    Serial.begin(9600);        \
    SPI.begin();               \
    mfrc522.PCD_Init();        \
    Serial.println("Scan a MIFARE Classic card");\
  \
    for (byte i = 0; i < 6; i++) \{\
        key.keyByte[i] = 0xFF; // Set the default key (0xFF) for new cards\
    \}\
\}\
\
int block = 10;\
byte buffer[16]; // Buffer to hold data to be written to the block\
\
void loop() \{\
    // Look for new cards\
    if (!mfrc522.PICC_IsNewCardPresent()) return;\
    if (!mfrc522.PICC_ReadCardSerial()) return;\
\
    Serial.println("Card selected");\
\
    // Write the integer 200000 as four bytes to the block\
    long valueToWrite = 200000;  \
    buffer[0] = (valueToWrite >> 24) & 0xFF;  // Most significant byte\
    buffer[1] = (valueToWrite >> 16) & 0xFF;\
    buffer[2] = (valueToWrite >> 8) & 0xFF;\
    buffer[3] = valueToWrite & 0xFF;           // Least significant byte\
\
    // Fill the rest of the block with zeroes\
    for (int i = 4; i < 16; i++) \{\
        buffer[i] = 0;\
    \}\
\
    writeBlock(block, buffer);  // Write the value to the block\
\
    // Read back the value\
    readBlock(block, buffer);\
    \
    // Combine the four bytes to retrieve the value\
    long readValue = ((long)buffer[0] << 24) | ((long)buffer[1] << 16) | ((long)buffer[2] << 8) | buffer[3];\
    Serial.print("Read value: ");\
    Serial.println(readValue);\
\}\
\
int writeBlock(int blockNumber, byte arrayAddress[]) \{\
    int largestModulo4Number = blockNumber / 4 * 4;\
    int trailerBlock = largestModulo4Number + 3;\
    if (blockNumber > 2 && (blockNumber + 1) % 4 == 0) return 2;\
\
    byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));\
    if (status != MFRC522::STATUS_OK) \{\
        Serial.print("Authentication failed: ");\
        Serial.println(mfrc522.GetStatusCodeName(status));\
        return 3;\
    \}\
\
    status = mfrc522.MIFARE_Write(blockNumber, arrayAddress, 16);\
    if (status != MFRC522::STATUS_OK) \{\
        Serial.print("MIFARE_Write failed: ");\
        Serial.println(mfrc522.GetStatusCodeName(status));\
        return 4;\
    \}\
\
    Serial.println("Block written successfully");\
    return 0;\
\}\
\
int readBlock(int blockNumber, byte arrayAddress[]) \{\
    int largestModulo4Number = blockNumber / 4 * 4;\
    int trailerBlock = largestModulo4Number + 3;\
\
    byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));\
    if (status != MFRC522::STATUS_OK) \{\
        Serial.print("Authentication failed (read): ");\
        Serial.println(mfrc522.GetStatusCodeName(status));\
        return 3;\
    \}\
\
    byte bufferSize = 18;\
    status = mfrc522.MIFARE_Read(blockNumber, arrayAddress, &bufferSize);\
    if (status != MFRC522::STATUS_OK) \{\
        Serial.print("MIFARE_Read failed: ");\
        Serial.println(mfrc522.GetStatusCodeName(status));\
        return 4;\
    \}\
\
    Serial.println("Block read successfully");\
    return 0;\
\}\
\
}